# -*- coding: utf-8 -*-
"""worksheet03 ashriya.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F3pNJ2KuMCohz-FIEaLKLBJB_RfM_Yhn
"""

import pandas as pd
data = {
    "Name": ["Alice", "Bob", "Charlie"],
    "Age": [25, 30, 35],
    "Salary": [50000, 60000, 70000]
}

df = pd.DataFrame(data)

df.to_csv("bank.csv", index=False)

print("bank.csv file created!")

import pandas as pd
bank_df = pd.read_csv("bank.csv")


object_columns = bank_df.select_dtypes(include='object').columns

unique_values = {col: bank_df[col].unique() for col in object_columns}

null_values = bank_df.isnull().sum()

numeric_df = bank_df.drop(columns=object_columns)

numeric_df.to_csv("banknumericdata.csv", index=False)

new_numeric_df = pd.read_csv("banknumericdata.csv")
summary_statistics = new_numeric_df.describe()

print("Columns with dtype=object:", object_columns)
print("\nUnique values in object columns:")
for col, values in unique_values.items():
    print(f"{col}: {values}")
print("\nNull values in each column:\n", null_values)
print("\nSummary Statistics:\n", summary_statistics)

"""problem2"""

import pandas as pd

data = {
    'StudentID': [1, 2, 3, 4, 5],
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eva'],
    'Age': [23, None, 21, 22, None],
    'GPA': [3.5, 3.7, None, 3.6, 3.8],
    'Specialization': ['Surgery', 'Pediatrics', 'Dermatology', 'Cardiology', 'Neurology']
}

medical_student_df = pd.DataFrame(data)

medical_student_df.to_csv("medical_student.csv", index=False)

print("medical_student.csv created successfully!")

medical_df = pd.read_csv("medical_student.csv")

print(medical_df.info())
print("Missing values per column:")
print(medical_df.isnull().sum())

for col in medical_df.columns:
    if medical_df[col].dtype in ['float64', 'int64']:
        medical_df[col].fillna(medical_df[col].mean(), inplace=True)
    else:
        medical_df[col].fillna(method='ffill', inplace=True)

print("Missing values after imputation:")
print(medical_df.isnull().sum())


duplicates_count = medical_df.duplicated().sum()
print(f"Number of duplicate rows: {duplicates_count}")
medical_df = medical_df.drop_duplicates()

"""problem3"""

import pandas as pd


data = {
    "Name": ["Braund, Mr. Owen Harris", "Cumings, Mrs. John Bradley", "Heikkinen, Miss. Laina",
             "Futrelle, Mrs. Jacques Heath", "Allen, Mr. William Henry"],
    "Pclass": [3, 1, 3, 1, 2],
    "Sex": ["male", "female", "female", "female", "male"],
    "Age": [22, 38, 26, 35, 35],
    "Fare": [7.25, 71.2833, 7.925, 53.1, 8.05],
    "Survived": [0, 1, 1, 1, 0],
    "Embarked": ["S", "C", "S", "S", "Q"]
}

titanic_df = pd.DataFrame(data)

titanic_df.to_csv("titanic.csv", index=False)
print("titanic.csv file created successfully!")

print(titanic_df)
import pandas as pd

titanic_df = pd.read_csv("titanic.csv")
print("Dataset loaded successfully!")

subset_df = titanic_df[['Name', 'Pclass', 'Sex', 'Age', 'Fare', 'Survived']]
first_class_df = subset_df[subset_df['Pclass'] == 1]

fare_stats = {
    "Mean": first_class_df['Fare'].mean(),
    "Median": first_class_df['Fare'].median(),
    "Max": first_class_df['Fare'].max(),
    "Min": first_class_df['Fare'].min(),
}
print("Fare statistics for first-class passengers:", fare_stats)

"""Problem 2 - Handle Null Values in Age"""

null_ages = subset_df['Age'].isnull().sum()
print(f"Number of null values in 'Age': {null_ages}")

cleaned_subset_df = subset_df.dropna(subset=['Age'])
print(f"Rows remaining after dropping nulls: {cleaned_subset_df.shape[0]}")

"""Problem 3 - One-Hot Encoding for Embarked"""

embarked_encoded = pd.get_dummies(titanic_df['Embarked'], prefix='Embarked')

titanic_df = pd.concat([titanic_df, embarked_encoded], axis=1)
titanic_df.drop(columns=['Embarked'], inplace=True)

print(titanic_df.head())

"""Problem 4 - Survival Rates by Gender"""

import matplotlib.pyplot as plt

# Mean survival rates by gender
survival_rates = titanic_df.groupby('Sex')['Survived'].mean()
print("Survival rates by gender:")
print(survival_rates)

survival_rates.plot(kind='bar', color=['blue', 'orange'])
plt.title("Survival Rates by Gender")
plt.ylabel("Survival Rate")
plt.xlabel("Gender")
plt.show()

"""Problem 5 - Survival Rates by Embarked Port"""

# Mean survival rates by port of embarkation
survival_rates_embarked = titanic_df.groupby(['Embarked_C', 'Embarked_Q', 'Embarked_S'])['Survived'].mean()
print("Survival rates by embarked port:")
print(survival_rates_embarked)

survival_rates_embarked.plot(kind='bar', color=['green', 'red', 'purple'])
plt.title("Survival Rates by Embarked Port")
plt.ylabel("Survival Rate")
plt.xlabel("Embarked Port")
plt.show()

"""week3
3 To - Do - Task
Please Complete all the problem listed below.
3.1 Warm Up Exercises:
1. Sorting and Subsetting:
Complete all following Task:
• Dataset for the Task: "titanic.csv"
Following task is common for all the problem:
1. Load the provided dataset and import in pandas DataFrame.
2. Check info of the DataFrame and identify following:
Problem 1 - Sorting:
1. Create a DataFrame called fare that contains only the Fare column of the Titanic dataset. Print the
head of the result.
2. Create a DataFrame called class age that contains only the Pclass and Age columns of the Titanic
dataset, in that order. Print the head of the result.
3. Create a DataFrame called survived gender that contains the Survived and Sex columns of the
Titanic dataset, in that order.Print the head of the result.



"""

import pandas as pd

df = pd.read_csv('titanic.csv')

print(df.info())


fare = df[['Fare']]
print("\nFare Column:")
print(fare.head())

class_age = df[['Pclass', 'Age']]
print("\nPclass and Age Columns:")
print(class_age.head())

survived_gender = df[['Survived', 'Sex']]
print("\nSurvived and Sex Columns:")
print(survived_gender.head())



"""Complete all the following Task:
Subsetting Rows:
1. Filter the Titanic dataset for cases where the passenger’s fare is greater than 100, assigning it
to fare gt 100.View the printed result.
2. Filter the Titanic dataset for cases where the passenger’s class (Pclass) is 1, assigning it to
first class.View the printed result.
3. Filter the Titanic dataset for cases where the passenger’s age is less than 18 and the passenger
is female (Sex is "female"), assigning it to female under 18. View the printed result.
Subsetting Rows by Categorical variables:
1. Filter the Titanic dataset for passengers whose Embarked port is either "C" (Cherbourg) or "S"
(Southampton), assigning the result to embarked c or s. View the printed result.
2. Filter the Titanic dataset for passengers whose Pclass is in the list [1, 2] (indicating first
or second class), assigning the result to first second class.View the printed result.
"""

import pandas as pd

df = pd.read_csv('titanic.csv')



fare_gt_100 = df[df['Fare'] > 100]
print("Passengers with Fare > 100:")
print(fare_gt_100.head())

first_class = df[df['Pclass'] == 1]
print("\nFirst Class Passengers:")
print(first_class.head())

female_under_18 = df[(df['Age'] < 18) & (df['Sex'] == 'female')]
print("\nFemale Passengers Under 18:")
print(female_under_18.head())


embarked_c_or_s = df[df['Embarked'].isin(['C', 'S'])]
print("\nPassengers Embarked at C (Cherbourg) or S (Southampton):")
print(embarked_c_or_s.head())

first_second_class = df[df['Pclass'].isin([1, 2])]
print("\nFirst or Second Class Passengers:")
print(first_second_class.head())

"""3.2 Exploratory Data Analysis Practice Exercise - 1.
Warning: Handle missing values in the Age column by filling them with the median age of

the dataset before performing the division.)

Answer the following questions from Dataset:
Which passenger had the highest fare paid relative to their age?
To answer the question perform following operations:
1. Add a column to the Titanic dataset, fare per year, containing the fare divided by the age of
the passenger(i.e., Fare/Age).
2. Subset rows where fare per year is higher than 5, assigning this to high fare age.
3. Sort high fare age by descending fare per year, assigning this to high fare age srt.
4. Select only the Name and fare per year columns of high fare age srt and save the result as result.
5. Look at the result.
Which adult male passenger (age ≥ 18 and Sex is ’male’) paid the highest fare relative to their
class?
To answer the question perform following operations:
1. Add a column to the Titanic dataset, fare per class, containing the fare divided by the passenger
class i.e. Fare / Pclass.
2. Subset rows where the passenger is male (Sex is ”male”) and an adult (Age is greater than or equal
to 18), assigning this to adult males.
3. Sort adult males by descending fare per class, assigning this to adult males srt.
4. Select only the Name, Age, and fare per class columns of adult males sr and save the result
as result.
5. Look at the result.
"""

import pandas as pd

df = pd.read_csv('titanic.csv')

df['Age'].fillna(df['Age'].median(), inplace=True)

# Task 1: Highest fare paid relative to their age

df['fare per year'] = df['Fare'] / df['Age']


high_fare_age = df[df['fare per year'] > 5]

high_fare_age_srt = high_fare_age.sort_values(by='fare per year', ascending=False)

result = high_fare_age_srt[['Name', 'fare per year']]

print("\nPassengers with highest fare per year:")
print(result.head())

# Task 2: Highest fare paid relative to their class for adult male passengers

df['fare per class'] = df['Fare'] / df['Pclass']

adult_males = df[(df['Sex'] == 'male') & (df['Age'] >= 18)]

adult_males_srt = adult_males.sort_values(by='fare per class', ascending=False)


result = adult_males_srt[['Name', 'Age', 'fare per class']]


print("\nAdult male passenger with the highest fare per class:")
print(result.head())

"""3.3 Exploratory Data Analysis with Group-by Method Practice Exercise:
Based on the dataset Answer the following question:
What percent of the total fare revenue came from each passenger class?
To answer the question perform following operation:
1. Calculate the total Fare paid across all passengers in the Titanic dataset.
2. Subset for passengers in first class (Pclass is 1) and calculate their total fare.
3. Do the same for second class (Pclass is 2) and third class (Pclass is 3).
4. Combine the fare totals from first, second, and third classes into a list.
5. Divide the totals for each class by the overall total fare to get the proportion of fare revenue by class.
Based on the dataset Answer the following question:
What percent of the total number of passengers on the Titanic belonged to each age group
(e.g., child, adult, senior)?
To answer the question perform following operation:
1. Create a new column, age group, that categorizes passengers into "child" (age < 18), "adult" (age
18{64), and "senior" (age 65 and above).
2. Calculate the total number of passengers on the Titanic.
3. Count the number of passengers in each age group.
4. Divide the count of each age group by the total number of passengers to get the proportion of passengers
in each age group.
5. Display the proportion as a percentage.
"""

import pandas as pd

df = pd.read_csv('titanic.csv')

total_fare = df['Fare'].sum()

first_class_fare = df[df['Pclass'] == 1]['Fare'].sum()

second_class_fare = df[df['Pclass'] == 2]['Fare'].sum()

third_class_fare = df[df['Pclass'] == 3]['Fare'].sum()

class_fare_totals = [first_class_fare, second_class_fare, third_class_fare]

fare_proportions = [fare / total_fare * 100 for fare in class_fare_totals]

print("Percentage of total fare revenue by class:")
print(f"First Class: {fare_proportions[0]:.2f}%")
print(f"Second Class: {fare_proportions[1]:.2f}%")
print(f"Third Class: {fare_proportions[2]:.2f}%")

"""task2"""

df['age group'] = pd.cut(df['Age'], bins=[-1, 18, 64, float('inf')], labels=['child', 'adult', 'senior'])


total_passengers = len(df)

age_group_counts = df['age group'].value_counts()

age_group_proportions = (age_group_counts / total_passengers) * 100

print("\nPercentage of passengers in each age group:")
print(f"Child: {age_group_proportions['child']:.2f}%")
print(f"Adult: {age_group_proportions['adult']:.2f}%")
print(f"Senior: {age_group_proportions['senior']:.2f}%")